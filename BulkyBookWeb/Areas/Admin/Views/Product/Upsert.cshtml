@model BulkyBook.Models.ViewModels.ProductVM

<!-- multipart/form-data allows us to upload files into this form -->
<form method="post" asp-action="Upsert" enctype="multipart/form-data">
    <!-- a hidden Id allows us to updates the objects properly instead of just creating a new entry every time we update the object -->
    <input asp-for="Product.Id" hidden />
    <!--  here too, if we don't have an input for a hidden image url, it will be null and the repository will just treat it as new entry -->
    <input asp-for="Product.ImageUrl" hidden />

    <div class="row">
        <div class="col-10">
            <div class="border p-3 mt-4 row">
                <div class="col-12 pb-2">
                    <h2 class="text-secondary">@(Model.Product.Id != 0 ? "Update" : "Create") Product</h2>
                    <hr />
                </div>
                @*<div asp-validation-summary="All"></div>*@
                <div class="mb-2">
                    <label asp-for="Product.Title"></label>
                    <input asp-for="Product.Title" class="form-control" />
                    <span asp-validation-for="Product.Title" class="text-danger"></span>
                </div>
                <div class="mb-2">
                    <label asp-for="Product.Description"></label>
                    <textarea asp-for="Product.Description" rows="3" class="form-control"></textarea>
                    <span asp-validation-for="Product.Description" class="text-danger"></span>
                </div>
                <div class="mb-2 col-6">
                    <label asp-for="Product.ISBN"></label>
                    <input asp-for="Product.ISBN" class="form-control" />
                    <span asp-validation-for="Product.ISBN" class="text-danger"></span>
                </div>
                <div class="mb-2 col-6">
                    <label asp-for="Product.Author"></label>
                    <input asp-for="Product.Author" class="form-control" />
                    <span asp-validation-for="Product.Author" class="text-danger"></span>
                </div>
                <div class="mb-2 col-6">
                    <label asp-for="Product.ListPrice"></label>
                    <input asp-for="Product.ListPrice" class="form-control" />
                    <span asp-validation-for="Product.ListPrice" class="text-danger"></span>
                </div>
                <div class="mb-2 col-6">
                    <label asp-for="Product.Price"></label>
                    <input asp-for="Product.Price" class="form-control" />
                    <span asp-validation-for="Product.Price" class="text-danger"></span>
                </div>
                <div class="mb-2 col-6">
                    <label asp-for="Product.Price50"></label>
                    <input asp-for="Product.Price50" class="form-control" />
                    <span asp-validation-for="Product.Price50" class="text-danger"></span>
                </div>
                <div class="mb-2 col-6">
                    <label asp-for="Product.Price100"></label>
                    <input asp-for="Product.Price100" class="form-control" />
                    <span asp-validation-for="Product.Price100" class="text-danger"></span>
                </div>
                <div class="mb-2">
                    <label asp-for="Product.ImageUrl"></label>
                    <input type="file" id="uploadBox" name="file" class="form-control" />
                </div>
                <div class="mb-2 col-6">
                    <label asp-for="Product.CategoryId"></label>
                    <!-- ViewBag lets us pass data from the Controller to the View, but not vice versa. Ideal for temp data not in a model -->
                    <select asp-for="Product.CategoryId" asp-items="@Model.CategoryList" class="form-select">
                        <option disabled selected>--Select Category--</option>
                    </select>
                    <span asp-validation-for="Product.CategoryId" class="text-danger"></span>
                </div>
                <div class="mb-2 col-6">
                    <label asp-for="Product.CoverTypeId"></label>
                    <!-- ViewData is derived from ViewDataDictionary which must be type casted into the IEnumerable<SelectListItem> -->
                    <select asp-for="Product.CoverTypeId" asp-items="@Model.CoverTypeList" class="form-select">
                        <option disabled selected>--Select Cover Type--</option>
                    </select>
                    <span asp-validation-for="Product.CoverTypeId" class="text-danger"></span>
                </div>
                <div class="col-12">
                    @if (Model.Product.Id != 0)
                    {
                        <button type="submit" class="btn btn-primary" style="width:150px">Update</button>
                    }
                    else
                    {
                        // this button fires of the JS stored in the Scripts section of this view using Sweetalerts in the _Layout file
                        <button type="submit" onclick="return ValidateInput()" class="btn btn-primary" style="width:150px">Create</button>
                    }
                    <a asp-controller="Product" asp-action="Index" class="btn btn-secondary" style="width:150px">
                        Back to List
                    </a>
                </div>
            </div>
        </div>
        <div class="col-2 pt-4">
            <img src="@Model.Product.ImageUrl"
            width="100%" style="border-radius:5px; border:1px solid #bbb9b9" />
        </div>
    </div>

    
</form>


@section Scripts{
    @{
        <partial name="_ValidationScriptsPartial" />
    }
    <script>
        function ValidateInput() {
            if(document.getElementById("uploadBox").value==""){
                swal({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please upload an image!',
                });
                return false;
            }
            return true;
        }
    </script>
}